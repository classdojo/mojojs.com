// Generated by CoffeeScript 1.6.3
var NPMSearch, async, flatstack, request, sift, type,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

flatstack = require("flatstack");

request = require("request");

sift = require("sift");

type = require("type-component");

async = require("async");

NPMSearch = (function() {
  /*
  */

  function NPMSearch() {
    this.all = __bind(this.all, this);
    this.load = __bind(this.load, this);
    this._callstack = flatstack();
    this._modules = [];
    this._keywords = [];
    this.load();
    setInterval(this.load, 1000 * 60 * 10);
  }

  /*
  */


  NPMSearch.prototype.load = function() {
    var req,
      _this = this;
    console.log("loading mojo modules");
    return req = request.get({
      url: "http://registry.npmjs.org/-/all",
      json: true
    }, function(err, response, body) {
      var key, keywords, module, moduleName, modules;
      modules = [];
      keywords = {};
      _this._keywords = [];
      for (moduleName in body) {
        module = body[moduleName];
        if (typeof module !== "object") {
          continue;
        }
        modules.push(body[moduleName]);
      }
      _this._modules = modules.filter(function(module) {
        if (!module.keywords || type(module.keywords) !== "array") {
          return false;
        }
        return ~module.keywords.indexOf("mojo-plugin");
      });
      _this._modules.forEach(function(module) {
        var keyword, _i, _len, _ref, _results;
        _ref = module.keywords;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          keyword = _ref[_i];
          if (keyword === "mojo-plugin") {
            continue;
          }
          if (!keywords[keywords]) {
            keywords[keywords] = 0;
          }
          _results.push(keywords[keywords]++);
        }
        return _results;
      });
      for (key in keywords) {
        _this._keywords.push({
          name: key,
          count: keywords[key]
        });
      }
      _this._keywords = _this._keywords.sort(function(a, b) {
        if (a.count > b.count) {
          return -1;
        } else {
          return 1;
        }
      });
      console.log("loaded %d mojo modules", _this._modules.length);
      console.log("keywords", _this._keywords.length);
      return _this._loadGithubInfo();
    });
  };

  /*
  */


  NPMSearch.prototype.keywords = function(next) {
    return next(null, this._keywords);
  };

  /*
  */


  NPMSearch.prototype.search = function(query, next) {
    return next(null, sift(query)(this._modules || []));
  };

  /*
  */


  NPMSearch.prototype.all = function(next) {
    var _this = this;
    return this._callstack.push(function() {
      return next(null, _this._modules);
    });
  };

  /*
  */


  NPMSearch.prototype._loadGithubInfo = function() {
    return async.eachSeries(this._modules, (function(module, next) {
      var headers, url, urlParts, _ref,
        _this = this;
      if (!((_ref = module.repository) != null ? _ref.url : void 0)) {
        return next();
      }
      urlParts = module.repository.url.match(/com\/([^\/]+)\/(.*)/);
      url = "https://api.github.com/repos/" + urlParts[1] + "/" + urlParts[2].replace(".git", "");
      headers = {
        "user-agent": "node.js"
      };
      return request.get({
        url: url,
        json: true,
        headers: headers
      }, function(err, response, body) {
        module.forks = body.forks_count;
        module.watchers = body.stargazers_count;
        return next();
      });
    }), function() {});
  };

  return NPMSearch;

})();

exports.load = function() {
  return new NPMSearch();
};

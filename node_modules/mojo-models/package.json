{
  "name": "mojo-models",
  "version": "0.1.42",
  "description": "mojo-models ===========",
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/classdojo/mojo-models"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/classdojo/mojo-models/issues"
  },
  "homepage": "https://github.com/classdojo/mojo-models",
  "devDependencies": {
    "expect.js": "^0.3.1",
    "mocha": "^1.20.1",
    "mojo-application": "0.0.8",
    "benchmark": "^1.0.0"
  },
  "dependencies": {
    "bindable": "0.5.x",
    "frills": "0.0.x",
    "mojo-registered-classes": "0.0.x",
    "lodash": "2.4.1",
    "janitorjs": "0.0.x",
    "bindable-decor-bindings": "0.1.x",
    "hurryup": "0.0.x",
    "async": "0.7.x"
  },
  "readme": "## Mojo Models [![Build Status](https://travis-ci.org/classdojo/mojo-models.svg)](https://travis-ci.org/classdojo/mojo-models)\n\n### Installation\n\n```\nnpm install mojo-models\n```\n\n### Features\n\n- easy to extend. register your own custom plugins to extend the functionality of models.\n\n### Examples\n\n- https://github.com/mojo-js/mojo-todomvc-example\n\n## API\n\n### Base(properties[, [application](https://github.com/mojo-js/mojo-application)])\n\nInherits [bindable.Object](https://github.com/mojo-js/bindable.js)\n\nbase model constructor\n\n- `properties` - properties to set on the model\n- `application` - (optional) mojo application\n\n```javascript\nvar models = require(\"mojo-models\");\nvar model = new models.Base({ message: \"Hello world!\" });\nconsole.log(model.message);\n```\n\n#### base.data\n\nThe raw data set on the model - this is usually transformed into something the model can \nuse via `deserialize`. \n\n```javascript\nvar model = new models.Base({ data: { message: \"Hello world!\" }});\nconsol.log(model.message); // Hello world!\nconsole.log(model.data); // { message: \"Hello world!\" }\n```\n\n#### base.deserialize(data)\n\ndeserializes data once `data` is set on the model\n\n```javascript\n\n\nvar Person = models.Base.extend({\n  deserialize: (data) {\n    return {\n      firstName: data.firstName,\n      lastName: data.lastName,\n      fullName: data.firstName + \" \" + data.lastName\n    };\n  }\n});\n\nvar person = new Person({\n  data: {\n    firstName: \"Craig\",\n    lastName: \"Condon\"\n  }\n});\n\nconsole.log(person.fullName); // Craig Condon\n\nperson.set(\"data\", { \n  firstName: \"A\",\n  lastName: \"B\"\n});\n\nconsole.log(person.fullName); // A B\n```\n\n#### base.serialize()\n\nserializes data. This is an alias to `toJSON`\n\n### Collection(properties[, [application](https://github.com/mojo-js/mojo-application)])\n\nInherits [bindable.Collection](https://github.com/mojo-js/bindable.js)\n\n#### collection.data\n\nthe raw source for the collection. Should be an array.\n\n```javascript\nvar Models = Collection.extend({\n  createModel: function (properties) {\n    return new models.Base(properties, this.application);\n  }\n});\n\nvar models = new Models();\n\nmodels.set(\"data\", [{ name: \"a\" }, { name: \"b\" }]);\n\nconsole.log(models.length); // 2\n```\n\n#### model collection.createModel(options)\n\nCreates a model. This method is usually defined when extending the base collection. It's also \ncalled when deserializing each item in `data`.\n\n```javascript\nvar Friend = models.Base.extend({\n});\n\nvar Friends = models.Collection.extend({\n  createModel: function (properties) {\n    return new Friend(properties, this.application);\n  }\n});\n\nvar friends = new Friends();\nvar friend = friends.create({ firstName: \"John\" });\n\nconsole.log(friend.firstName); // John\nconsole.log(friends.length); // 1\n```\n\n#### model collection.create(properties)\n\ncreates a new model, and adds to the collection immediately. See example above.\n\n\n## Built-in plugins\n\n### persist\n\nPersistence layer for models / collections. Also adds the methods `load`, `save`, and `remove`.\n\n```javascript\nvar superagent = require(\"superagent\");\n\nvar Person = models.Base.extend({\n  persist: {\n    load: function (onLoad) {\n      superagent.get(\"/people/\" + this._id).end(onLoad);\n    },\n    remove: function (onRemove) {\n      superagent.del(\"/people/\" + this._id).end(onRemove);\n    },\n    save: function (onSave) {\n      if (this._id) {\n        superagent.put(\"/people/\" + this._id).body(this.serialize()).end(onSave);\n      } else {\n        superagent.post(\"/people\").body(this.serialize()).end(onSave);\n      }\n    }\n  },\n  serialize: function () {\n    return {\n      firstName: this.firstName,\n      lastName: this.lastName\n    };\n  }\n});\n\nvar person = new Person({ _id: \"person1\" });\n\nperson.set(\"firstName\", \"Craig\");\n\nperson.save(); // POST /people/person1 { firstName: \"Craig\" }\nperson.load(); // loads the s \nperson.remove(); // removes the model\n```\n\n#### persistable.load(onLoad)\n\ncalls the `persist.load` function, and sets result to `data` to be deserialized on the model. Note that\nload can be called only once. Use `reload` to reload the model\n\n#### persistable.reload(onReload)\n\nreloads the model\n\n#### persistable.save(onSave)\n\ncalls the `persist.save` function, and sets result to `data` to be deserialized on the model.\n\n#### persistable.remove(onRemove)\n\nremoves the model\n\n#### persistable events\n\n- `willSave` - emitted when the model is about to be saved\n- `didSave` - emitted when the model has been saved\n- `willRemove` - emitted when the model is about to be removed\n- `didRemove` - emitted when the model has been removed\n\n\nremoves the model\n\n### virtuals\n\nVirtual properties all you to load external resources as they're needed. This is especially useful when\ndata-binding models to views.\n\n\n```javascript\n\nvar superagent = require(\"superagent\");\n\nvar Friends = models.Collection.extend({\n\n  // creates a new person for each item in .data\n  createModel: function (options) {\n    return new Person(options, this.application);\n  },\n  persist: {\n  \n    // executed when .load, or .reload is called\n    load: function (complete) {\n      superagent.get(\"/person/\" + this.friendee._id + \"/friends\").end(function (err, result) {\n        complete(null, result);\n      });  \n    }\n  }\n});\n\nvar Person = models.Base.extend({\n  virtuals: {\n  \n    // triggered on bind()\n    friends: function (onLoad) {\n      new Friends({ friendee: this }).load(onLoad);\n    }\n  }\n});\n\nvar person = new Person({ _id: \"person1\" });\n\nconsole.log(person.get(\"friends\")); // should be undefined\n\n// activates virtual property, and calls /person/person1/friends API\nperson.bind(\"friends\", function (friends) {\n  this.dispose(); // dispose the binding immediately\n  \n});\n\n```\n\n### bindings\n\nBindings allow you to compute properties on models.\n\n```javascript\n\nvar bindable = require(\"bindable\");\n\nvar Person = models.Base.extend({\n  bindings: {\n    \"firstName, lastName\": function (firstName, lastName) {\n      this.set(\"fullName\", firstName + \" \"+ lastName);\n    }\n  }\n\nvar person = new Person({ firstName: \"A\", lastName: \"B\" });\nconsole.log(person.fullName); // \ndocument.body.appendChild(person.render());\n```\n\n\n## Application API\n\n#### views(application)\n\nregisters `mojo-models` to the [mojo-application](https://github.com/mojo-js/mojo-application), which will add a few properties\n/ methods onto the application.\n\n```javascript\nvar Application = require(\"mojo-application\"),\nmodels         = require(\"mojo-models\");\n\nvar app = new Application();\napp.use(models);\n```\n\n#### application.models.register(modelNameOrClasses[, class])\n\nRegisters a model class that's accessible anywhere in the application. \n\n`modelNameOrClasses` - view name to register, or an object of classses to register\n`class` - the class to register\n\n```javascript\n\nvar app = new Application();\n\napp.use(require(\"mojo-models\"));\n\n// register views one at a time\napp.models.register(\"person\", Person);\n\n// or register multiple views at a time\napp.models.register({\n  person: Person,\n  friends: Friends\n});\n\nvar person = app.models.create(\"person\");\n```\n\n#### application.models.create(modelName, properties)\n\nCreates a new, registered component\n\n- `modelName` - the registered model component name\n- `properties` - the properties to assign to the created model. \n\n```javascript\nvar Person = views.Base.extend({\n  \n});\n\napplication.models.register(\"person\", Person);\n\nvar hello = application.views.create(\"person\", { name: \"Craig\" });\n\nconsole.log(hello.name); // Craig\n```\n\n#### application.models.decorator(decorator)\n\nRegisters a model plugin. This is useful if you want to extend the functionality for each model. The implementation\nis idential to [mojo view decorators](https://github.com/mojo-js/mojo-views#applicationviewsdecoratordecorator).\n\n## Unit Testing\n\nUnit tests are very easy to write for mojo-models. Here's a basic example using `mocha`, and `expect.js`:\n\nView:\n\n```javascript\nvar models = require(\"mojo-models\");\nmodule.exports = models.Base.extend({\n    bindings: {\n        \"firstName, lastName\": function (firstName, lastName) {\n            this.set(\"fullName\", firstName + \" \" + lastName);\n        }\n    }\n});\n```\n\nUnit Test:\n\n```javascript\nvar Person = require(\"./person\"),\nexpect = require(\"expect.js\");\n\ndescribe(__filename + \"#\", function() {\n\n    var model;\n    \n    beforeEach(function() {\n        model = new Person();\n    });\n    \n    it(\"properly computes first / last name when changed\", function () {\n        model.setProperties({\n          firstName: \"A\",\n          lastName: \"B\"\n        });\n        expect(model.get(\"fullName\")).to.be(\"A B\");\n    });\n});\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "4c845223aef02422083f1e1bf83c5931cc8a1c27",
  "_id": "mojo-models@0.1.42",
  "_shasum": "1ebcb48d986abd281942236ddf45ffb210e9c6ad",
  "_from": "mojo-models@^0.1.29"
}

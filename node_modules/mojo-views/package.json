{
  "name": "mojo-views",
  "version": "0.1.27",
  "description": "modular mv+ JavaScript framework for node, and the web",
  "main": "./lib/index.js",
  "jam": {
    "baseUrl": "public",
    "packageDir": "public/vendor",
    "dependencies": {
      "jquery": "1.7.x",
      "jquery-transit": "*",
      "underscore": "*",
      "events": "0.0.x",
      "async": "0.2.x"
    },
    "config": {
      "repository": "http://npm.classdojo.com:5984/jam",
      "paths": {
        "templates": "public/templates"
      }
    }
  },
  "scripts": {
    "test": "make test-node"
  },
  "keywords": [
    "mojo-plugin"
  ],
  "repository": {
    "url": "git://github.com/classdojo/mojo.js.git"
  },
  "dependencies": {
    "type-component": "0.0.x",
    "bindable": "0.5.x",
    "janitorjs": "0.0.4",
    "factories": "0.0.x",
    "loaf": "0.2.x",
    "nofactor": "0.0.x",
    "bindable-decor-bindings": "0.1.x",
    "underscore": "1.4.x",
    "protoclass": "0.0.5",
    "subindable": "0.1.x",
    "runlater": "0.0.x",
    "poolparty": "0.0.x",
    "flatstack": "0.0.10",
    "boojs": "0.0.x",
    "async": "0.x.x",
    "mojo-animator": "0.0.x",
    "mojo-application": "0.0.x",
    "frills": "0.0.2",
    "mojo-registered-classes": "0.0.x",
    "noselector": "0.0.x"
  },
  "devDependencies": {
    "expect.js": "~0.2.0",
    "paperclip": "0.3.x",
    "jsdom": "~0.8.9",
    "mocha": "~1.15.1",
    "istanbul": "~0.1.46",
    "coveralls": "~2.5.0",
    "benchmark": "~1.0.0",
    "browserify": "~3.24.2",
    "yuidocjs": "^0.3.50",
    "mojo-paperclip": "0.4.x",
    "sinon": "^1.10.3"
  },
  "readme": "[![Build Status](https://travis-ci.org/classdojo/mojo-views.svg)](https://travis-ci.org/classdojo/mojo-views)\n\nControls exactly what the user sees and does. View controllers are plugin-based - they don't come with any special features out of the box, such as template engines. This allows you to fully customize exactly how view controllers behave. See [Decorators](#applicationviewsdecoratordecorator) to understand how to add / create plugins to views.\n\n### Installation\n\n```javascript\nnpm install mojo-views\n```\n\n### Features\n\n- Easy interpolation between other libraries such as Backbone, React, Angular, etc. (no lock-in)\n- Mojo views can run in the browser, along with Node.js.\n\n### Examples\n\n- https://github.com/mojo-js/mojo-todomvc-example\n- [Hello World](http://requirebin.com/?gist=a4af5f1b896589825799)\n- [Sorted List view](http://requirebin.com/?gist=7ccce61d8a95bf2cb5a5)\n- [Stack View](http://requirebin.com/?gist=7ccce61d8a95bf2cb5a5)\n- [Handlebars template engine](http://requirebin.com/?gist=0413cdddfb3097e696eb)\n- [Paperclip template engine](http://requirebin.com/?gist=add1e20b9071e37fd9d1)\n- [Computed properties](http://requirebin.com/?gist=cafd6df55bb711c88a1d)\n\n\n### See also\n\n- [bindable.js](https://github.com/classdojo/bindable.js) - base class for each view\n- [mojo-paperclip](/mojo-js/mojo-paperclip) - template engine\n\n## API\n\n\n### views.Base(properties[, [application](https://github.com/mojo-js/mojo-application)])\n\nExtends [bindable.Object](https://github.com/classdojo/bindable.js)\n\nThe base view that controls what the user sees and does\n\n- `properties` - the properties that get set on the view controller\n- `application` - (optional) the mojo application. If this is omitted, then the `global application` will be used.\n\n[Example](http://requirebin.com/?gist=a4af5f1b896589825799): \n\n```javascript\nvar views = require(\"mojo-views\");\n\nvar HelloView = views.Base.extend({\n    didCreateSection: function () {\n      this.section.appendChild(this.application.nodeFactory.createTextNode(\"Hello \" + this.get(\"message\") + \"!\"));\n    }\n});\n\nvar helloView = new HelloView({ message: \"World\" });\ndocument.body.appendChild(helloView.render());\n```\n\n\n#### DocumentFragment base.render()\n\nRenders the view, and returns a document fragment\n\n#### base.willRender()\n\nCalled right before the view is rendered\n\n#### base.didRender()\n\nCalled right after the view is rendered\n\n#### base.didCreateSection()\n\nCalled once the `section` is created. This is usually where you might add elements to your view controller.\n\n#### base.section\n\nThe section, or virtual document fragment which contains all the elements. See [loaf.js](https://github.com/mojo-js/loaf.js) for further documentation.\n\n#### base.$\n\nnode.js-safe query selector for document elements. Useful especially for unit testing.\n\n#### base.application\n\nThe [application](https://github.com/mojo-js/mojo-application).\n\n#### base.remove()\n\nRemoves the view's elements from the DOM.\n\n#### base.willRemove()\n\nCalled right before the view is removed\n\n#### base.didRemove()\n\nCalled right after the view is removed\n\n#### base.visible\n\ntrue / false if the view is currently visible to the user\n\n#### base.parent\n\nreference to the parent view\n\n#### events\n\n- `remove` - emitted when the view is removed\n- `render` - emitted when the view is rendered\n- `dispose` - emitted when the view is disposed\n\n### views.Stack(properties[, [application](https://github.com/mojo-js/mojo-application)])\n\nExtends [views.Base](#viewsbaseproperties-application)\n\nThe stack view is a container with many children where only one is displayed at a time. Stack views are very useful when building Single Page Applications with navigation, and often times with an HTTP router, such as [mojo-router](https://github.com/mojo-js/mojo-router).\n\n```javascript\nvar Pages = views.Stack.extend({\n  children: {\n    home: require(\"./home\"),\n    account: require(\"./account\")\n  }\n});\n\nvar pages = new Pages();\npages.set(\"state\", \"home\"); // move to the home page\n```\n\n#### stack.state\n\nthe current state of the stack view. See example above.\n\n#### stack.states\n\nAllows you to control the state of multiple nested stack.\n\n```javascript\n\nvar AccountPages = views.Stack.extend({\n  children: {\n    billing: require(\"./billing\"),\n    profile: require(\"./profile\")\n  }\n});\n\nvar Pages = views.Stack.extend({\n  name: \"main\",\n  children: {\n    home: require(\"./home\"),\n    account: AccountPages\n  }\n});\n\nvar pages = new Pages();\n\npages.set(\"states\", {\n  main: \"account\",\n  account: \"profile\"\n});\n```\n\n### views.List(properties[, [application](https://github.com/mojo-js/mojo-application)])\n\nExtends [views.Base](#viewsbaseproperties-application)\n\nCreates a list of views which is represented by a bindable collection. Note that each model is set as model property for each list item view created. See the example below.\n\n```javascript\nvar bindable = require(\"bindable\");\n\nvar items = new bindable.Collection([\n  new bindable.Object({ text: \"hello 1\" }),\n  new bindable.Object({ text: \"hello 2\" }),\n  new bindable.Object({ text: \"hello 3\" })\n]);\n\nvar ItemView = views.Base.extend({\n  didCreateSection: function () {\n    this.section.appendChild(this.nodeFactory.createTextNode(this.get(\"model.text\")));\n  }\n});\n\nvar ItemsView = new views.List.extend({\n  modelViewClass: ItemView\n});\n\nvar items = new ItemsView({ source: items });\ndocument.body.appendChild(items.render());\n```\n\n#### list.source\n\nThe source of the list. This should be a [bindable.Collection](https://github.com/classdojo/bindable.js).\nNote that this can also be a reference to another property in the list. This is especially useful when inheriting properties from a parent view. See [property scope](#property-scope) for more info.\n\n#### list.modelViewClass\n\nThe view class that's created for each `model` in `source`. Note\nthat the property `model` is set to each listed view, as shown in the example above.\n\n#### list.sort(modelA, modelB)\n\nThe sorting function for the list\n\n```javascript\nvar bindable = require(\"bindable\");\n\nvar people = new bindable.Collection([\n  new bindable.Object({ name: \"John\", age: 29 }),\n  new bindable.Object({ name: \"Jeff\", age: 21  }),\n  new bindable.Object({ name: \"Ben\", age: 23  })\n]);\n\nvar PeopleView = new views.List.extend({\n  modelViewClass: PersionView, // not defined in this example\n  sort: function (a, b) {\n    return a.get(\"age\") > b.get(\"age\") ? -1 : 1;\n  }\n});\n\ndocument.body.append(new PeopleView({ source: people }).render());\n```\n\n#### list.filter(model)\n\nFilters models from the list\n\n## Built-in Plugins\n\n#### bindings\n\nBindings allow you to compute properties on each view.\n\n[Example](http://requirebin.com/?gist=cafd6df55bb711c88a1d):\n\n```javascript\nvar views       = require(\"mojo-views\"),\n    bindable    = require(\"bindable\");\n\nvar PersonView = views.Base.extend({\n  bindings: {\n    \"model.firstName, model.lastName\": function (firstName, lastName) {\n      this.textNode.nodeValue = \"Hello \" + firstName + \" \" + lastName;\n    }\n  },\n  didCreateSection: function () {\n    this.textNode = this.application.nodeFactory.createTextNode(\"\");\n    this.section.appendChild(this.textNode);\n  }\n});\n\nvar person = new PersonView({\n  model: new bindable.Object({\n    firstName: \"John\",\n \tlastName: \"Gordon\"\n  })\n});\n\ndocument.body.appendChild(person.render());\n```\n\n#### children\n\nChildren allow you to define child view controller which get added to the view controller. This allows a greater level of\norganization in your codebase. Here's an example of a basic view structure:\n\n```javascript\n\n// this view never actually gets removed - it's always stuck at the top\nvar HeaderView = views.Base.extend({\n  didCreateSection: function () {\n    // render elements here\n  }\n});\n\n// the main home page\nvar HomeView = views.Stack.extend({\n  didCreateSection: function () {\n    // render home elements here\n  }\n});\n\nvar ContactView = views.Stack.extend({\n  didCreateSection: function () {\n    // render elements here\n  }\n});\n\n\n// toggles between home, and contact states\nvar PagesView = views.Stack.extend({\n  children: {\n    home: HomeView,\n    contact: ContactView\n  }\n});\n\n// the main entry point into the views\nvar MainView = views.Base.extend({\n  didCreateSection: function () {\n    this.section.appendChild(this.children.header.render());\n    this.section.appendChild(this.children.pages.render());\n  },\n  children: {\n    header: HeaderView,\n    pages: PagesView\n  }\n});\n\nvar mainView = new MainView();\ndocument.body.appendChild(mainView.render());\n```\n\n## Property Scope\n\nViews, just like variable scope, have the ability to inherit properties from their parent view. For example:\n\n```javascript\nvar TodoView = views.List.extend({\n  didCreateSection: function () {\n    this.section.appendChild(this.nodeFactory.createTextNode(this.get(\"model.text\")));\n  }\n});\n\nvar TodosListView = views.List.extend({\n  modelViewClass: TodoView, \n\n  // this is inherited from mainView when set in the constructor\n  source: \"todoItems\"\n});\n\nvar MainView = views.Base.extend({\n  children: {\n    todosList: TodosListView\n  },\n  didCreateSection: function () {\n    this.section.appendChild(this.nodeFactory.createTextNode(\"Todos: \"));\n    this.section.appendChild(this.get(\"children.todosList\").render());\n  }\n});\n\nvar todos = new bindable.Collection([\n  new bindable.Object({ text: \"clean car\" }),\n  new bindable.Object({ text: \"walk dog\" })\n]);\n\n/*\nwill output:\n\n\nTodos: clean car walk dog\n*/\n\ndocument.body.appendChild(new MainView({ todoItems: todos }).render());\n```\n\n### Breaking Scope\n\nYou can also be explicit about what properties are inherited from the parent view by setting\n`define` in the view. For example:\n\n```javascript\n\nvar ChildView = views.Base.extend({\n  define: [\"message\"],\n  message: \"Hello World!\",\n  willRender: function () {\n    this.section.appendChild(this.nodeFactory.createTextNode(this.get(\"message\")));\n  }\n})\n\nvar ParentView = views.Base.extend({\n  children: {\n    child: ChildView\n  }\n  willRender: function () {\n    this.section.appendChild(this.get(\"children.child\").render());\n  }\n});\n\n// outputs: \"Hello World!\" instead of \"Blarg!\"\ndocument.body.appendChild(new ParentView({ message: \"Blarg!\" }).render());\n```\n\n## Application API\n\n#### views(application)\n\nregisters `mojo-views` to the [mojo-application](https://github.com/mojo-js/mojo-application), which will add a few properties\n/ methods onto the application.\n\n```javascript\nvar Application = require(\"mojo-application\"),\nviews           = require(\"mojo-views\");\n\nvar app = new Application();\napp.use(views);\n```\n\n#### application.views.register(viewNameOrClasses[, class])\n\nRegisters a view class that's accessible anywhere in the application. This is especially useful when registering reusable components\nyou might want to use in something like [paperclip-component](https://github.com/mojo-js/paperclip-component).\n\n`viewNameOrClasses` - view name to register, or an object of classses to register\n`class` - the class to register\n\n```javascript\n\nvar app = new Application();\n\n// register views one at a time\napp.views.register(\"main\", MainView);\n\n// or register multiple views at a time\napp.views.register({\n  main: MainView,\n  select: SelectView,        // re-usable select component\n  loadingBar: LoadingBarView // re-usable loading bar component\n  datePicker: DatePickerView // re-usable date picker view\n});\n\n\nvar SomeView = views.Base.extend({\n  didCreateSection: function () {\n\n    // create the component, and append to this view\n    this.section.appendChild(this.application.views.create(\"datePicker\").render());\n  }\n});\n\n\n// create some view, but use the application that \n// has all the registered components\nvar view = new SomeView(void 0, app);\n\n\ndocument.body.appendChild(view.render());\n```\n\n#### application.views.create(viewName, properties)\n\nCreates a new, registered component\n\n- `viewName` - the registered view component name\n- `properties` - the properties to assign to the created view. \n\n```javascript\nvar HelloView = views.Base.extend({\n  \n});\n\napplication.views.register(\"hello\", HelloView);\n\nvar hello = application.views.create(\"hello\", { name: \"Craig\" });\n\nconsole.log(hello.name); // Craig\n```\n\n#### application.views.decorator(decorator)\n\nRegisters a view plugin. This is useful if you want to extend the functionality for each view. Super useful for \ninterpolation between different libraries. Here's an [example](http://requirebin.com/?gist=0413cdddfb3097e696eb) of using a handlebars template engine:\n\n```javascript\n\nvar handlebars = require(\"handlebars\");\n\nvar HelloView = views.Base.extend({\n  handlebars: \"<div> hello {{name}}!</div>\"\n});\n\napplication.views.register(\"hello\", HelloView);\n\napplication.views.decorator({\n  getOptions: function (view) {\n    return view.handlebars;\n  },  \n  decorate: function (view, templateSource) {\n    var template = handlebars.compile(templateSource);\n\n    function render () {\n      view.section.replaceChildNodes(template(view));\n    }\n\n    render();\n\n    // render whenever the view changes\n    view.on(\"change\", render);\n  }\n})\n```\n\n## Unit Testing\n\nUnit tests are very easy to write for mojo-views. Here's a basic example using `mocha`, and `expect.js`:\n\nView:\n\n```javascript\nvar views = require(\"mojo-views\");\nmodule.exports = views.Base.extend({\n    : {\n        \"firstName, lastName\": function (firstName, lastName) {\n            this.$(this.textNode).val(firstName + \" \" + lastName);\n        }\n    },\n    didCreateSection: function () {\n        this.textNode = this.application.nodeFactory.createTextNode(\"\");\n        this.section.appendChild(this.textNode);\n        \n    }\n});\n```\n\nUnit Test:\n\n```javascript\nvar PersonView = require(\"./person\"),\nexpect = require(\"expect.js\");\n\ndescribe(__filename + \"#\", function() {\n\n    var view;\n    \n    beforeEach(function() {\n        view = new PersonView();\n    });\n    \n    it(\"displays the information properly\", function () {\n        var fragment = view.render();\n        view.setProperties({\n            firstName: \"Liam\",\n            lastName: \"Don\"\n        });\n        expect(fragment.childNodes[0].nodeValue).to.be(\"Liam Don\");\n    });\n});\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "f4fd9a8f1b4664847a08c29cb3bd48424a45619e",
  "bugs": {
    "url": "https://github.com/classdojo/mojo.js/issues"
  },
  "homepage": "https://github.com/classdojo/mojo.js",
  "_id": "mojo-views@0.1.27",
  "_shasum": "08e78ad7eb5efa98435412f58d266cfae3b78014",
  "_from": "mojo-views@0.1.x"
}

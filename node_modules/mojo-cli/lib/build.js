var browserify       = require("browserify"),
browserifyMiddleware = require("browserify-middleware"),
express              = require("express"),
transform            = require("./transform"),
uglify               = require("uglify-js"),
outcome              = require("outcome"),
async                = require("async"),
fs                   = require("fs"),
mkdirp               = require("mkdirp"),
path                 = require("path"),
compression          = require("compression"),
glob                 = require("glob"),
path                 = require("path");

/**
 */

module.exports =  function (options, complete) {
  if (!complete) complete = function () {};


  async.waterfall([
    setTransformer.bind(this, options),
    build.bind(this, options),
    minify.bind(this, options),
    write.bind(this, options),
    serve.bind(this, options)
  ], complete);

};

function findNodeModulesDir (options) {
  var dirs = options.input.split("/"),
  nmdir;

  while (dirs.length) {
    if (fs.existsSync(nmdir = dirs.join("/") + "/node_modules")) break;
    dirs.pop();
  }

  return nmdir;

}

/**
 */

function setTransformer (options, next) {
  var packages = glob.sync(findNodeModulesDir(options) + "/*/package.json").map(function (pt) {
    var pkg = require(pt);
    pkg.path = pt;
    return pkg;
  }),
  transformers = packages.filter(function (pkg) {
    return !!pkg.transform;
  }).map(function (pkg) {
    try {
      return require(path.dirname(pkg.path) + "/" + pkg.transform);
    } catch (e) {
      return {};
    }
  });


  options.transformer = transform(transformers);
  next();
}

/**
 */

function build (options, next) {

  

  var b = browserify(options.input, {
    transform: options.transformer,
    extensions: options.transformer.extensions
  });
  b.transform(options.transformer);
  b.bundle({
    debug: options.debug
  }, next);
}

/**
 */

function minify (options, content, next) {
  if (!options.minify) return next(null, content);
  var source = uglify.parse(content, {
    strict: false
  });
  source.figure_out_scope();
  source.compute_char_frequency();
  source.mangle_names();
  next(null, source.print_to_string({
    ascii_only: true,
    quote_keys: true
  }));
}

/**
 */

function write (options, content, next) {
  if (!options.output) return next();
  mkdirp.sync(path.dirname(options.output));
  fs.writeFile(options.output, content, next);
}

/**
 */

function serve (options, next) {
  if (!options.serve) return next();
  var server = express();
  server.use(compression());

  if (options.output) {
    server.all(options.output.replace(options.serve, ""), browserifyMiddleware(require.resolve(options.input), {
      minify: true,
      transform: options.transformer,
      extensions: options.transformer.extensions
    }));
  }

  server.use(express.static(options.serve));

  server.listen(options.port);
  console.log("open http://localhost:%d", options.port);
}


if (typeof mojo == "undefined") {
  if (typeof window !== "undefined") {
    window.mojo = {};
  } else {
    global.mojo = {};
  }
}

if (typeof process !== "undefined") {
  var React = require("react");
}

var viewsDecorator = {
  getOptions: function (view) {
    return view.react;
  },
  decorate: function (view, reactClass) {

    // would be nice if react allowed elements to be rendered onto a document fragment, but
    // this isn't possible atm (CC)
    var div = view.application.nodeFactory.createElement("div");
    view.section.append(div);

    // create the react component (CC)
    var component = React.renderComponent(view.react(view), div);

    // bind the react component to the mojo view, and update if anything changes
    view.on("change", function (key, value) {
      var nextProps = {};
      nextProps[key] = value;
      component.setProps(nextProps);
    });
  }
};

module.exports = function (app) { 
  app.views.decorator(viewsDecorator);
};


mojo.react = {
  createClass: module.exports.createReactClass = function (mojoViewClass) {
    return React.createClass({
      componentDidMount: function () {
        this.getDOMNode().appendChild((this.__view = new mojoViewClass(this.props)).render());

        var self = this;

        this.__view.on("change", function (key, value) {
          var nextProps = {};
          nextProps[key] = value;
          self.setProps(nextProps);
        })
      },
      componentWillUnmount: function () {
        if (this.__view) this.__view.dispose();
      },
      render: function () {
        return React.DOM.div(null);
      }
    });
  }
};



if (mojo.application) {
  mojo.application.use(module.exports);
}